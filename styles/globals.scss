@use "sass:color";
@use "sass:string";
@use "partials/variables" as *;
@use "partials/layout" as *;
@use "partials/shape" as *;
@use "partials/component" as *;

// === Globals ===
* {
    margin: 0;
    padding: 0;
    color: inherit;
    font-size: inherit;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

// === Sizes ===
@each $fs, $val in $font_sizes {
    .fs-#{$fs} { font-size: $val }
}

:root {
    @each $size, $val in $sizes {
        --s-#{$size}: #{$val};
    }
    @each $fs, $val in $font_sizes {
        --fs-#{$fs}: #{$val};
    }
}

// === Colors and gradients ===
@each $clr, $val in $colors {
    .clr-#{$clr} { color: $val }
    .bclr-#{$clr} { background-color: $val }
    .bocolor-#{$clr} { border-color: $val }
}

:root {
    @each $clr, $val in $colors {
        --c-#{$clr}: #{$val};
    }

    @each $clr1 in ["red", "purple", "cyan", "green", "yellow", "orange"] {
        @each $clr2 in ["red", "purple", "cyan", "green", "yellow", "orange"] {
            @if $clr1 != $clr2 {
                $s: string.slice($clr1, 1, 1);
                $e: string.slice($clr2, 1, 1);
                --clg-#{$s}#{$e}: #{lg(to right, $clr1, $clr2)};
            }
        }
    }

    @each $clr1 in ["red", "purple", "cyan", "green", "yellow", "orange"] {
        @each $clr2 in ["red", "purple", "cyan", "green", "yellow", "orange"] {
            @if $clr1 != $clr2 {
                $s: string.slice($clr1, 1, 1);
                $e: string.slice($clr2, 1, 1);
                --crg-#{$s}#{$e}: #{rg($clr1, $clr2)};
            }
        }
    }
}

@each $clr1, $val in ["red", "purple", "cyan", "green", "yellow", "orange"] {
    @each $clr2, $val in ["red", "purple", "cyan", "green", "yellow", "orange"] {
        @if $clr1 != $clr2 {
            $s: string.slice($clr1, 1, 1);
            $e: string.slice($clr2, 1, 1);
        }
    }
}
// === Layouts ===
// margins and paddings
@each $s_name, $val in $sizes {
    @each $name, $size in [
        ($s_name, #{$val}rem),
        (r#{$s_name}, #{$val}em)
    ] {
        .w-#{$name} { width: $size;}
        .h-#{$name} { height: $size;}
        .m-#{$name} { margin: $size; }
        .mv-#{$name} { margin: $size 0; }
        .mh-#{$name} { margin: 0 $size; }
        .mt-#{$name} { margin-top: $size; }
        .mb-#{$name} { margin-bottom: $size; }
        .mr-#{$name} { margin-right: $size; }
        .ml-#{$name} { margin-left: $size; }
        .p-#{$name} { padding: $size; }
        .pv-#{$name} { padding: $size 0; }
        .ph-#{$name} { padding: 0 $size; }
        .pt-#{$name} { padding-top: $size; }
        .pb-#{$name} { padding-bottom: $size; }
        .pr-#{$name} { padding-right: $size; }
        .pl-#{$name} { padding-left: $size; }
        .bw-#{$name} {
            border-size: $size; 
            border-style: solid;
        }
        .br-#{$name} {
            border-radius: $size;
            border-style: solid;
        }
    }
}
.mh-auto { margin: 0 auto; }
.w-full {width: 100%;}
.h-full {height: 100%;}
.wh-full {width: 100%; height: 100%;}
.w-half {width: 50%;}
.h-half {height: 50%;}

.if { @include f(true); }
.f { @include f(); }

.g {
    display: grid;
    &.c { place-content: center; }
    // Gaps in grid. 
    @each $name, $val in $sizes {
        $size: #{$val}rem;
        &.g-#{$name} { gap: $size; }
        &.rg-#{$name} { row-gap: $size; }
        &.cg-#{$name} { column-gap: $size; }
        $size: #{$val}em;
        $name: r#{$name};
        &.g-#{$name} { gap: $size; }
        &.rg-#{$name} { row-gap: $size; }
        &.cg-#{$name} { column-gap: $size; }
    }
}
// 2 or 3 columns layout.
.g_3_cols {
    @extend .g;
    grid-template-columns: 
        [content-start left-50-start left-30-start left-60-start]
        2fr
        [left-30-end right-60-start middle-start]
        1fr
        [left-50-end right-50-start]
        1fr
        [left-60-end right-30-start middle-end]
        2fr
        [content-end right-50-end right-30-end right-60-end]
        ;
    > {
        * { 
            grid-column: content; 
        }
        @each $name in [right, left] {
            @each $nb in [30, 50, 60] {
                .#{$name}-#{$nb} {
                    grid-column: #{$name}-#{$nb};
                }
            }
        }
        .middle {
            grid-column: middle;
        }
    }
}

// === Components ===
// Reaveal on parent hover.
*:not(:hover) {
    .on-parent-hover {
        display: none;
    }
}

// Button with icon.
.btni {
    @extend %if;
    @include row;
    align-items: center;
    background-color: transparent;
    text-decoration: none;
    border-style: none;
    border-radius: 5px;
    height: min-content;
    width: min-content;
    padding: $s2;
    margin: $s1;
    > .bi {
        @include sq($rs6);
        display: inline;
        color: inherit;
    }
    &.btnt>.bi {
        margin-right: $rs2;
    }
    @include hover {
        background-color: fade-out($fg, .9);
    }
}

.ico-link {
    color: $green;
    text-decoration: none;
    > .bi {
        @include sq($rs4);
        display: inline;
        color: inherit;
    }
}

.ilink {
    @extend %if;
    @include row;
    align-items: center;
    color: $green;
    > .bi {
        @include sq($rs4);
        display: inline;
        color: inherit;
        margin-right: $s1;
    }
    
}

.button {
    text-decoration: none;
    border-radius: 5px;
    border: 3px solid $fg;
    padding: .5em 1em;
    width: max-content;
    height: max-content;
    background-color: fade-out($fg, .8);
    @include hover {
        background-color: fade-out($fg, .4);
        color: $bg;
    }
}

.section {
    @include mv($s4);
}

.toggle {
    @include pill($rs7, $rs3);
    display: flex;
    flex-direction: row;
    align-items: center;
    border: 3px solid $fg;
    background-color: fade-out($fg, .8);
    padding: $s1;
    &.off {
        justify-content: start;
    }
    &.on {
        justify-content: end;
    }
    &::after {
        content: "";
        @include circle($rs3);
        background-color: $fg;
    }
}


// === Page Layout ===
html {
    scroll-behaviour: smooth;
    color: $fg;
    font-size: $fsm;
}

.body {
    display: grid;
    height: 100vh;
    grid-template-columns: auto 1fr;
    grid-template-rows: max-content auto max-content;
    background-color: $bg;
    background-image: url("/static/background.svg");
    background-attachment: fixed;
    background-blend-mode: overlay;
}

.header {
    grid-column: 1/3;
    grid-row: 1/2;
    width: 100%;
}

.aside {
    grid-column: 1/2;
}

#content {
    grid-column: 2/3;
    grid-row: 2/3;
}

.footer {
    grid-row: 3/4;
}

