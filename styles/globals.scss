@use "partials/component/interactible" as *;
@use "partials/component/txt" as *;
@use "partials/component/icons" as *;
@use "partials/component/contener" as *;
@use "partials/variables" as *;
@use "partials/layout" as *;
@use "partials/shape" as *;
@use "sass:color";
@use "sass:string";

// === Globals ===
* {
  margin: 0;
  padding: 0;
  color: inherit;
  font-size: inherit;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

// === Sizes ===
@each $fs, $val in $font_sizes {
  .fs-#{$fs} { font-size: $val }
}

:root {
  @each $size, $val in $sizes {
    --s-#{$size}: #{$val};
  }
  @each $fs, $val in $font_sizes {
    --fs-#{$fs}: #{$val};
  }
}

// === text related ===
.tac {text-align: center;}

// === Colors and gradients ===
.clr-black {color: $black;}
.clr-grey {color: $grey;}
.clr-d-grey {color: $d-grey;}
@each $clr, $val in $colors {
  .clr-#{$clr} { color: $val }
  .bclr-#{$clr} { background-color: $val }
  .bocolor-#{$clr} { border-color: $val }
}
@each $clr, $val in $m-colors {
  .clr-#{$clr} { color: $val }
  .bclr-#{$clr} { background-color: $val }
  .bocolor-#{$clr} { border-color: $val }
}
@each $clr, $val in $d-colors {
  .clr-#{$clr} { color: $val }
  .bclr-#{$clr} { background-color: $val }
  .bocolor-#{$clr} { border-color: $val }
}

:root {
  --c-black: #{$black};
  @each $clr, $val in $colors {
    --c-#{$clr}: #{$val};
  }

  @each $clr1 in ["red", "purple", "cyan", "green", "yellow", "orange"] {
    @each $clr2 in ["red", "purple", "cyan", "green", "yellow", "orange"] {
      @if $clr1 != $clr2 {
        $s: string.slice($clr1, 1, 1);
        $e: string.slice($clr2, 1, 1);
        --clg-#{$s}#{$e}: #{lg(to right, $clr1, $clr2)};
      }
    }
  }

  @each $clr1 in ["red", "purple", "cyan", "green", "yellow", "orange"] {
    @each $clr2 in ["red", "purple", "cyan", "green", "yellow", "orange"] {
      @if $clr1 != $clr2 {
        $s: string.slice($clr1, 1, 1);
        $e: string.slice($clr2, 1, 1);
        --crg-#{$s}#{$e}: #{rg($clr1, $clr2)};
      }
    }
  }
}

@each $clr1, $val in ["red", "purple", "cyan", "green", "yellow", "orange"] {
  @each $clr2, $val in ["red", "purple", "cyan", "green", "yellow", "orange"] {
    @if $clr1 != $clr2 {
      $s: string.slice($clr1, 1, 1);
      $e: string.slice($clr2, 1, 1);
    }
  }
}
// === Layouts ===
// margins and paddings
@each $s_name, $val in $sizes {
  @each $name, $size in [($s_name, #{$val}rem), (r#{$s_name}, #{$val}em)] {
    .w-#{$name} { width: $size;}
    .h-#{$name} { height: $size;}
    // Margin 
    .m-#{$name} { margin: $size; }
    .mv-#{$name} { margin-top: $size; margin-bottom: $size;  }
    .mh-#{$name} { margin-left: $size; margin-right: $size;  }
    .mt-#{$name} { margin-top: $size; }
    .mb-#{$name} { margin-bottom: $size; }
    .mr-#{$name} { margin-right: $size; }
    .ml-#{$name} { margin-left: $size; }
    // Padding
    .p-#{$name} { padding: $size; }
    .pv-#{$name} { padding-top: $size; padding-bottom: $size;  }
    .ph-#{$name} { padding-left: $size; padding-right: $size;  }
    .pt-#{$name} { padding-top: $size; }
    .pb-#{$name} { padding-bottom: $size; }
    .pr-#{$name} { padding-right: $size; }
    .pl-#{$name} { padding-left: $size; }

    .bw-#{$name} { border-size: $size; border-style: solid; }
    // Border Radius.
    .br-#{$name} { border-radius: $size; }
    .brtl-#{$name} { border-top-left-radius: $size; }
    .brtr-#{$name} { border-top-right-radius: $size; }
    .brbl-#{$name} { border-bottom-left-radius: $size; }
    .brbr-#{$name} { border-bottom-right-radius: $size; }
    .brl-#{$name} {
      border-bottom-left-radius: $size;
      border-top-left-radius: $size;
    }
    .brr-#{$name} {
      border-bottom-right-radius: $size;
      border-top-right-radius: $size;
    }
    .brt-#{$name} {
      border-top-right-radius: $size;
      border-top-left-radius: $size;
    }
    .brb-#{$name} {
      border-bottom-right-radius: $size;
      border-bottom-left-radius: $size;
    }
    .brt-#{$name} {
      border-top-right-radius: $size;
      border--left-radius: $size;
    }
  }
}

.mh-auto { margin: 0 auto; }
.wf {width: 100%;}
.hf {height: 100%;}
.wmc {width: min-content;}
.hmc {height: min-content;}
.whmc {height:min-content; width: min-content;}
.hmc {height: min-content;}
.whf {width: 100%; height: 100%;}
.wh {width: 50%;}
.hh {height: 50%;}
.ar1 {aspect-ratio: 1;}
.whh {width: 50%; height: 50%;}
.wfc {width: fit-content;} 
.hfc {height: fit-content;}
.whfc {width: fit-content;height: fit-content;} 


.if {
  display: inline-flex;
  @extend %flex;
}

.f {
  display: flex;
  @extend %flex;
}

.g {
  display: grid;
  &.c { place-content: center; }
  // Gaps in grid. 
  @each $name, $val in $sizes {
    $size: #{$val}rem;
    &.g-#{$name} { gap: $size; }
    &.rg-#{$name} { row-gap: $size; }
    &.cg-#{$name} { column-gap: $size; }
    $size: #{$val}em;
    $name: r#{$name};
    &.g-#{$name} { gap: $size; }
    &.rg-#{$name} { row-gap: $size; }
    &.cg-#{$name} { column-gap: $size; }
  }
}

// 2 or 3 columns layout.
.g_cols {
  @extend .g;
  grid-template-columns: 
  [content-start left-50-start left-30-start left-60-start]
  2fr
  [left-30-end right-60-start middle-start]
  1fr
  [left-50-end right-50-start]
  1fr
  [left-60-end right-30-start middle-end]
  2fr
  [content-end right-50-end right-30-end right-60-end]
  ;
  grid-auto-rows: min-content;
  > {
  * { 
    grid-column: content; 
  }
  @each $name in [right, left] {
    @each $nb in [30, 50, 60] {
      .#{$name}-#{$nb} {
        grid-column: #{$name}-#{$nb};
      }
    }
  }
  .middle { grid-column: middle; }
  .sac { align-self: center; }
  .sjc { justify-self: center; }
}
}

// === Default Page Layout ===
html {
  scroll-behaviour: smooth;
  color: $white;
  font-size: $fsm;
}

.body {
  display: grid;
  height: 100vh;
  grid-template-columns: auto 1fr;
  grid-template-rows: max-content auto max-content;
  background-color: $black;
  background-image: url("/static/background.svg");
  background-size: 200px;
  background-repeat: repeat;
  background-blend-mode: multiply;
  filter: contrast(170%) luminosity(10000%);
}

.header {
  grid-column: 1/3;
  grid-row: 1/2;
  width: 100%;
}

.aside {
  grid-column: 1/2;
}

#content {
  grid-column: 2/3;
  grid-row: 2/3;
}

.footer {
  grid-row: 3/4;
}

nav > a {
  margin: 0;
  font-size: inherit;
  position: relative;

  &.active::before {
    height: $s1;
  }

  &::before {
    content: '';
    position: absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 50%;
    height: 0;
    background-color: $d-purple;
    border-top-right-radius: 3px;
    border-top-left-radius: 3px;
    transition: height 0.1s;
  }

  &:hover::before {
    height: $s1;
  }
}
